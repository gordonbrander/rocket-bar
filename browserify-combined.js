(function(){var require = function (file, cwd) {
    var resolved = require.resolve(file, cwd || '/');
    var mod = require.modules[resolved];
    if (!mod) throw new Error(
        'Failed to resolve module ' + file + ', tried ' + resolved
    );
    var cached = require.cache[resolved];
    var res = cached? cached.exports : mod();
    return res;
};

require.paths = [];
require.modules = {};
require.cache = {};
require.extensions = [".js",".coffee",".json",".html",".svg"];

require._core = {
    'assert': true,
    'events': true,
    'fs': true,
    'path': true,
    'vm': true
};

require.resolve = (function () {
    return function (x, cwd) {
        if (!cwd) cwd = '/';

        if (require._core[x]) return x;
        var path = require.modules.path();
        cwd = path.resolve('/', cwd);
        var y = cwd || '/';

        if (x.match(/^(?:\.\.?\/|\/)/)) {
            var m = loadAsFileSync(path.resolve(y, x))
                || loadAsDirectorySync(path.resolve(y, x));
            if (m) return m;
        }

        var n = loadNodeModulesSync(x, y);
        if (n) return n;

        throw new Error("Cannot find module '" + x + "'");

        function loadAsFileSync (x) {
            x = path.normalize(x);
            if (require.modules[x]) {
                return x;
            }

            for (var i = 0; i < require.extensions.length; i++) {
                var ext = require.extensions[i];
                if (require.modules[x + ext]) return x + ext;
            }
        }

        function loadAsDirectorySync (x) {
            x = x.replace(/\/+$/, '');
            var pkgfile = path.normalize(x + '/package.json');
            if (require.modules[pkgfile]) {
                var pkg = require.modules[pkgfile]();
                var b = pkg.browserify;
                if (typeof b === 'object' && b.main) {
                    var m = loadAsFileSync(path.resolve(x, b.main));
                    if (m) return m;
                }
                else if (typeof b === 'string') {
                    var m = loadAsFileSync(path.resolve(x, b));
                    if (m) return m;
                }
                else if (pkg.main) {
                    var m = loadAsFileSync(path.resolve(x, pkg.main));
                    if (m) return m;
                }
            }

            return loadAsFileSync(x + '/index');
        }

        function loadNodeModulesSync (x, start) {
            var dirs = nodeModulesPathsSync(start);
            for (var i = 0; i < dirs.length; i++) {
                var dir = dirs[i];
                var m = loadAsFileSync(dir + '/' + x);
                if (m) return m;
                var n = loadAsDirectorySync(dir + '/' + x);
                if (n) return n;
            }

            var m = loadAsFileSync(x);
            if (m) return m;
        }

        function nodeModulesPathsSync (start) {
            var parts;
            if (start === '/') parts = [ '' ];
            else parts = path.normalize(start).split('/');

            var dirs = [];
            for (var i = parts.length - 1; i >= 0; i--) {
                if (parts[i] === 'node_modules') continue;
                var dir = parts.slice(0, i + 1).join('/') + '/node_modules';
                dirs.push(dir);
            }

            return dirs;
        }
    };
})();

require.alias = function (from, to) {
    var path = require.modules.path();
    var res = null;
    try {
        res = require.resolve(from + '/package.json', '/');
    }
    catch (err) {
        res = require.resolve(from, '/');
    }
    var basedir = path.dirname(res);

    var keys = (Object.keys || function (obj) {
        var res = [];
        for (var key in obj) res.push(key);
        return res;
    })(require.modules);

    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key.slice(0, basedir.length + 1) === basedir + '/') {
            var f = key.slice(basedir.length);
            require.modules[to + f] = require.modules[basedir + f];
        }
        else if (key === basedir) {
            require.modules[to] = require.modules[basedir];
        }
    }
};

(function () {
    var process = {};
    var global = typeof window !== 'undefined' ? window : {};
    var definedProcess = false;

    require.define = function (filename, fn) {
        if (!definedProcess && require.modules.__browserify_process) {
            process = require.modules.__browserify_process();
            definedProcess = true;
        }

        var dirname = require._core[filename]
            ? ''
            : require.modules.path().dirname(filename)
        ;

        var require_ = function (file) {
            var requiredModule = require(file, dirname);
            var cached = require.cache[require.resolve(file, dirname)];

            if (cached && cached.parent === null) {
                cached.parent = module_;
            }

            return requiredModule;
        };
        require_.resolve = function (name) {
            return require.resolve(name, dirname);
        };
        require_.modules = require.modules;
        require_.define = require.define;
        require_.cache = require.cache;
        var module_ = {
            id : filename,
            filename: filename,
            exports : {},
            loaded : false,
            parent: null
        };

        require.modules[filename] = function () {
            require.cache[filename] = module_;
            fn.call(
                module_.exports,
                require_,
                module_,
                module_.exports,
                dirname,
                filename,
                process,
                global
            );
            module_.loaded = true;
            return module_.exports;
        };
    };
})();


require.define("path",Function(['require','module','exports','__dirname','__filename','process','global'],"function filter (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (fn(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length; i >= 0; i--) {\n    var last = parts[i];\n    if (last == '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Regex to split a filename into [*, dir, basename, ext]\n// posix version\nvar splitPathRe = /^(.+\\/(?!$)|\\/)?((?:.+?)?(\\.[^.]*)?)$/;\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\nvar resolvedPath = '',\n    resolvedAbsolute = false;\n\nfor (var i = arguments.length; i >= -1 && !resolvedAbsolute; i--) {\n  var path = (i >= 0)\n      ? arguments[i]\n      : process.cwd();\n\n  // Skip empty and invalid entries\n  if (typeof path !== 'string' || !path) {\n    continue;\n  }\n\n  resolvedPath = path + '/' + resolvedPath;\n  resolvedAbsolute = path.charAt(0) === '/';\n}\n\n// At this point the path should be resolved to a full absolute path, but\n// handle relative paths to be safe (might happen when process.cwd() fails)\n\n// Normalize the path\nresolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\nvar isAbsolute = path.charAt(0) === '/',\n    trailingSlash = path.slice(-1) === '/';\n\n// Normalize the path\npath = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n  \n  return (isAbsolute ? '/' : '') + path;\n};\n\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    return p && typeof p === 'string';\n  }).join('/'));\n};\n\n\nexports.dirname = function(path) {\n  var dir = splitPathRe.exec(path)[1] || '';\n  var isWindows = false;\n  if (!dir) {\n    // No dirname\n    return '.';\n  } else if (dir.length === 1 ||\n      (isWindows && dir.length <= 3 && dir.charAt(1) === ':')) {\n    // It is just a slash or a drive letter with a slash\n    return dir;\n  } else {\n    // It is a full dirname, strip trailing slash\n    return dir.substring(0, dir.length - 1);\n  }\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPathRe.exec(path)[2] || '';\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPathRe.exec(path)[3] || '';\n};\n\n//@ sourceURL=path"
));

require.define("__browserify_process",Function(['require','module','exports','__dirname','__filename','process','global'],"var process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n        && window.setImmediate;\n    var canPost = typeof window !== 'undefined'\n        && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener('message', function (ev) {\n            if (ev.source === window && ev.data === 'browserify-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('browserify-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nprocess.binding = function (name) {\n    if (name === 'evals') return (require)('vm')\n    else throw new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    process.cwd = function () { return cwd };\n    process.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\n//@ sourceURL=__browserify_process"
));

require.define("/node_modules/reducers/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {}\n//@ sourceURL=/node_modules/reducers/package.json"
));

require.define("/node_modules/reducers/filter.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar reducer = require(\"./reducer\")\n\nvar filter = reducer(function filter(predicate, next, value, result) {\n  /**\n  Composes filtered version of given `source`, such that only items contained\n  will be once on which `f(item)` was `true`.\n\n  ## Example\n\n  var digits = filter([ 10, 23, 2, 7, 17 ], function(value) {\n    return value >= 0 && value <= 9\n  })\n  print(digits) // => < 2 7 >\n  **/\n  return predicate(value) ? next(value, result) :\n         result\n})\n\nmodule.exports = filter\n\n//@ sourceURL=/node_modules/reducers/filter.js"
));

require.define("/node_modules/reducers/reducer.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar reduce = require(\"reducible/reduce\")\nvar reducible = require(\"reducible/reducible\")\nvar isError = require(\"reducible/is-error\")\nvar end = require(\"reducible/end\")\n\n\nfunction reducer(process) {\n  /**\n  Convenience function to simplify definitions of transformation function, to\n  avoid manual definition of `reducible` results and currying transformation\n  function. It creates typical transformation function with a following\n  signature:\n\n      transform(source, options)\n\n  From a pure data `process` function that is called on each value for a\n  collection with following arguments:\n\n    1. `options` - Options passed to the resulting transformation function\n       most commonly that's a function like in `map(source, f)`.\n    2. `next` - Function which needs to be invoked with transformed value,\n       or simply not called to skip the value.\n    3. `value` - Last value emitted by a collection being reduced.\n    4. `result` - Accumulate value.\n\n  Function is supposed to return new, accumulated `result`. It may either\n  pass mapped transformed `value` and `result` to the `next` continuation\n  or skip it.\n\n  For example see `map` and `filter` functions.\n  **/\n  return function reducer(source, options) {\n    // When return transformation function is called with a source and\n    // `options`\n    return reducible(function reduceReducer(next, initial) {\n      // When actual result is \n      reduce(source, function reduceReducerSource(value, result) {\n        // If value is `end` of source or an error just propagate through,\n        // otherwise call `process` with all the curried `options` and `next`\n        // continuation function.\n        return value === end ? next(value, result) :\n               isError(value) ? next(value, result) :\n               process(options, next, value, result)\n      })\n    })\n  }\n}\n\nmodule.exports = reducer\n\n//@ sourceURL=/node_modules/reducers/reducer.js"
));

require.define("/node_modules/reducible/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./reducible.js\"}\n//@ sourceURL=/node_modules/reducible/package.json"
));

require.define("/node_modules/reducible/reduce.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar method = require(\"method\")\n\nvar isReduced = require(\"./is-reduced\")\nvar isError = require(\"./is-error\")\nvar end = require(\"./end\")\n\nvar reduce = method(\"reduce\")\n\n// Implementation of `reduce` for the empty collections, that immediately\n// signals reducer that it's ended.\nreduce.empty = function reduceEmpty(empty, next, initial) {\n  next(end, initial)\n}\n\n// Implementation of `reduce` for the singular values which are treated\n// as collections with a single element. Yields a value and signals the end.\nreduce.singular = function reduceSingular(value, next, initial) {\n  next(end, next(value, initial))\n}\n\n// Implementation of `reduce` for the array (and alike) values, such that it\n// will call accumulator function `next` each time with next item and\n// accumulated state until it's exhausted or `next` returns marked value\n// indicating that it's reduced. Either way signals `end` to an accumulator.\nreduce.indexed = function reduceIndexed(indexed, next, initial) {\n  var state = initial\n  var index = 0\n  var count = indexed.length\n  while (index < count) {\n    var value = indexed[index]\n    state = next(value, state)\n    index = index + 1\n    if (value === end) return end\n    if (isError(value)) return state\n    if (isReduced(state)) return state.value\n  }\n  next(end, state)\n}\n\n// Both `undefined` and `null` implement accumulate for empty sequences.\nreduce.define(void(0), reduce.empty)\nreduce.define(null, reduce.empty)\n\n// Array and arguments implement accumulate for indexed sequences.\nreduce.define(Array, reduce.indexed)\n\nfunction Arguments() { return arguments }\nArguments.prototype = Arguments()\nreduce.define(Arguments, reduce.indexed)\n\n// All other built-in data types are treated as single value collections\n// by default. Of course individual types may choose to override that.\nreduce.define(reduce.singular)\n\n// Errors just yield that error.\nreduce.define(Error, function(error, next) { next(error) })\nmodule.exports = reduce\n\n//@ sourceURL=/node_modules/reducible/reduce.js"
));

require.define("/node_modules/method/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./core.js\"}\n//@ sourceURL=/node_modules/method/package.json"
));

require.define("/node_modules/method/core.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar defineProperty = Object.defineProperty || function(object, name, property) {\n  object[name] = property.value\n  return object\n}\n\n// Shortcut for `Object.prototype.toString` for faster access.\nvar typefy = Object.prototype.toString\n\n// Map to for jumping from typeof(value) to associated type prefix used\n// as a hash in the map of builtin implementations.\nvar types = { \"function\": \"Object\", \"object\": \"Object\" }\n\n// Array is used to save method implementations for the host objects in order\n// to avoid extending them with non-primitive values that could cause leaks.\nvar host = []\n// Hash map is used to save method implementations for builtin types in order\n// to avoid extending their prototypes. This also allows to share method\n// implementations for types across diff contexts / frames / compartments.\nvar builtin = {}\n\nfunction Primitive() {}\nfunction ObjectType() {}\nObjectType.prototype = new Primitive()\nfunction ErrorType() {}\nErrorType.prototype = new ObjectType()\n\nvar Default = builtin.Default = Primitive.prototype\nvar Null = builtin.Null = new Primitive()\nvar Void = builtin.Void = new Primitive()\nbuiltin.String = new Primitive()\nbuiltin.Number = new Primitive()\nbuiltin.Boolean = new Primitive()\n\nbuiltin.Object = ObjectType.prototype\nbuiltin.Error = ErrorType.prototype\n\nbuiltin.EvalError = new ErrorType()\nbuiltin.InternalError = new ErrorType()\nbuiltin.RangeError = new ErrorType()\nbuiltin.ReferenceError = new ErrorType()\nbuiltin.StopIteration = new ErrorType()\nbuiltin.SyntaxError = new ErrorType()\nbuiltin.TypeError = new ErrorType()\nbuiltin.URIError = new ErrorType()\n\n\nfunction Method(hint) {\n  /**\n  Private Method is a callable private name that dispatches on the first\n  arguments same named Method:\n\n      method(object, ...rest) => object[method](...rest)\n\n  Optionally hint string may be provided that will be used in generated names\n  to ease debugging.\n\n  ## Example\n\n      var foo = Method()\n\n      // Implementation for any types\n      foo.define(function(value, arg1, arg2) {\n        // ...\n      })\n\n      // Implementation for a specific type\n      foo.define(BarType, function(bar, arg1, arg2) {\n        // ...\n      })\n  **/\n\n  // Create an internal unique name if `hint` is provided it is used to\n  // prefix name to ease debugging.\n  var name = (hint || \"\") + \"#\" + Math.random().toString(32).substr(2)\n\n  function dispatch(value) {\n    // Method dispatches on type of the first argument.\n    // If first argument is `null` or `void` associated implementation is\n    // looked up in the `builtin` hash where implementations for built-ins\n    // are stored.\n    var type = null\n    var method = value === null ? Null[name] :\n                 value === void(0) ? Void[name] :\n                 // Otherwise attempt to use method with a generated private\n                 // `name` that is supposedly in the prototype chain of the\n                 // `target`.\n                 value[name] ||\n                 // Otherwise assume it's one of the built-in type instances,\n                 // in which case implementation is stored in a `builtin` hash.\n                 // Attempt to find a implementation for the given built-in\n                 // via constructor name and method name.\n                 ((type = builtin[(value.constructor || \"\").name]) &&\n                  type[name]) ||\n                 // Otherwise assume it's a host object. For host objects\n                 // actual method implementations are stored in the `host`\n                 // array and only index for the implementation is stored\n                 // in the host object's prototype chain. This avoids memory\n                 // leaks that otherwise could happen when saving JS objects\n                 // on host object.\n                 host[value[\"!\" + name]] ||\n                 // Otherwise attempt to lookup implementation for builtins by\n                 // a type of the value. This basically makes sure that all\n                 // non primitive values will delegate to an `Object`.\n                 ((type = builtin[types[typeof(value)]]) && type[name])\n\n\n    // If method implementation for the type is still not found then\n    // just fallback for default implementation.\n    method = method || Default[name]\n\n\n    // If implementation is still not found (which also means there is no\n    // default) just throw an error with a descriptive message.\n    if (!method) throw TypeError(\"Type does not implements method: \" + name)\n\n    // If implementation was found then just delegate.\n    return method.apply(method, arguments)\n  }\n\n  // Make `toString` of the dispatch return a private name, this enables\n  // method definition without sugar:\n  //\n  //    var method = Method()\n  //    object[method] = function() { /***/ }\n  dispatch.toString = function toString() { return name }\n\n  // Copy utility methods for convenient API.\n  dispatch.implement = implementMethod\n  dispatch.define = defineMethod\n\n  return dispatch\n}\n\n// Create method shortcuts form functions.\nvar defineMethod = function defineMethod(Type, lambda) {\n  return define(this, Type, lambda)\n}\nvar implementMethod = function implementMethod(object, lambda) {\n  return implement(this, object, lambda)\n}\n\n// Define `implement` and `define` polymorphic methods to allow definitions\n// and implementations through them.\nvar implement = Method(\"implement\")\nvar define = Method(\"define\")\n\n\nfunction _implement(method, object, lambda) {\n  /**\n  Implements `Method` for the given `object` with a provided `implementation`.\n  Calling `Method` with `object` as a first argument will dispatch on provided\n  implementation.\n  **/\n  return defineProperty(object, method.toString(), {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: lambda\n  })\n}\n\nfunction _define(method, Type, lambda) {\n  /**\n  Defines `Method` for the given `Type` with a provided `implementation`.\n  Calling `Method` with a first argument of this `Type` will dispatch on\n  provided `implementation`. If `Type` is a `Method` default implementation\n  is defined. If `Type` is a `null` or `undefined` `Method` is implemented\n  for that value type.\n  **/\n\n  // Attempt to guess a type via `Object.prototype.toString.call` hack.\n  var type = Type && typefy.call(Type.prototype)\n\n  // If only two arguments are passed then `Type` is actually an implementation\n  // for a default type.\n  if (!lambda) Default[method] = Type\n  // If `Type` is `null` or `void` store implementation accordingly.\n  else if (Type === null) Null[method] = lambda\n  else if (Type === void(0)) Void[method] = lambda\n  // If `type` hack indicates built-in type and type has a name us it to\n  // store a implementation into associated hash. If hash for this type does\n  // not exists yet create one.\n  else if (type !== \"[object Object]\" && Type.name) {\n    var Bulitin = builtin[Type.name] || (builtin[Type.name] = new ObjectType())\n    Bulitin[method] = lambda\n  }\n  // If `type` hack indicates an object, that may be either object or any\n  // JS defined \"Class\". If name of the constructor is `Object`, assume it's\n  // built-in `Object` and store implementation accordingly.\n  else if (Type.name === \"Object\")\n    builtin.Object[method] = lambda\n  // Host objects are pain!!! Every browser does some crazy stuff for them\n  // So far all browser seem to not implement `call` method for host object\n  // constructors. If that is a case here, assume it's a host object and\n  // store implementation in a `host` array and store `index` in the array\n  // in a `Type.prototype` itself. This avoids memory leaks that could be\n  // caused by storing JS objects on a host objects.\n  else if (Type.call === void(0)) {\n    var index = host.indexOf(lambda)\n    if (index < 0) index = host.push(lambda) - 1\n    // Prefix private name with `!` so it can be dispatched from the method\n    // without type checks.\n    implement(\"!\" + method, Type.prototype, index)\n  }\n  // If Got that far `Type` is user defined JS `Class`. Define private name\n  // as hidden property on it's prototype.\n  else\n    implement(method, Type.prototype, lambda)\n}\n\n// And provided implementations for a polymorphic equivalents.\n_define(define, _define)\n_define(implement, _implement)\n\n// Define exports on `Method` as it's only thing being exported.\nMethod.implement = implement\nMethod.define = define\nMethod.Method = Method\nMethod.method = Method\nMethod.builtin = builtin\nMethod.host = host\n\nmodule.exports = Method\n\n//@ sourceURL=/node_modules/method/core.js"
));

require.define("/node_modules/reducible/is-reduced.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar reduced = require(\"./reduced\")\n\nfunction isReduced(value) {\n  return value && value.is === reduced\n}\n\nmodule.exports = isReduced\n\n//@ sourceURL=/node_modules/reducible/is-reduced.js"
));

require.define("/node_modules/reducible/reduced.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\n\n// Exported function can be used for boxing values. This boxing indicates\n// that consumer of sequence has finished consuming it, there for new values\n// should not be no longer pushed.\nfunction reduced(value) {\n  /**\n  Boxes given value and indicates to a source that it's already reduced and\n  no new values should be supplied\n  **/\n  return { value: value, is: reduced }\n}\n\nmodule.exports = reduced\n\n//@ sourceURL=/node_modules/reducible/reduced.js"
));

require.define("/node_modules/reducible/is-error.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar stringifier = Object.prototype.toString\n\nfunction isError(value) {\n  return stringifier.call(value) === \"[object Error]\"\n}\n\nmodule.exports = isError\n\n//@ sourceURL=/node_modules/reducible/is-error.js"
));

require.define("/node_modules/reducible/end.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nmodule.exports = String(\"End of the collection\")\n\n//@ sourceURL=/node_modules/reducible/end.js"
));

require.define("/node_modules/reducible/reducible.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar reduce = require(\"./reduce\")\nvar end = require(\"./end\")\nvar isError = require(\"./is-error\")\nvar isReduced = require(\"./is-reduced\")\nvar reduced = require(\"./reduced\")\n\nfunction Reducible(reduce) {\n  /**\n  Reducible is a type of the data-structure that represents something\n  that can be reduced. Most of the time it's used to represent transformation\n  over other reducible by capturing it in a lexical scope.\n\n  Reducible has an attribute `reduce` pointing to a function that does\n  reduction.\n  **/\n\n  // JS engines optimize access to properties that are set in the constructor's\n  // so we set it here.\n  this.reduce = reduce\n}\n\n// Implementation of `accumulate` for reducible, which just delegates to it's\n// `reduce` attribute.\nreduce.define(Reducible, function reduceReducible(reducible, next, initial) {\n  var result\n  // State is intentionally accumulated in the outer variable, that way no\n  // matter if consumer is broken and passes in wrong accumulated state back\n  // this reducible will still accumulate result as intended.\n  var state = initial\n  try {\n    reducible.reduce(function forward(value) {\n      try {\n        // If reduction has already being completed return is set to\n        // an accumulated state boxed via `reduced`. It's set to state\n        // that is return to signal input that reduction is complete.\n        if (result) state = result\n        // if dispatched `value` is is special `end` of input one or an error\n        // just forward to reducer and store last state boxed as `reduced` into\n        // state. Later it will be assigned to result and returned to input\n        // to indicate end of reduction.\n        else if (value === end || isError(value)) {\n          next(value, state)\n          state = reduced(state)\n        }\n        // if non of above just accumulate new state by passing value and\n        // previously accumulate state to reducer.\n        else state = next(value, state)\n\n        // If state is boxed with `reduced` then accumulation is complete.\n        // Indicated explicitly by a reducer or by end / error of the input.\n        // Either way store it to the result in case broken input attempts to\n        // call forward again.\n        if (isReduced(state)) result = state\n\n        // return accumulated state back either way.\n        return state\n      }\n      // If error is thrown then forward it to the reducer such that consumer\n      // can apply recovery logic. Also store current `state` boxed with\n      // `reduced` to signal input that reduction is complete.\n      catch (error) {\n        next(error, state)\n        result = reduced(state)\n        return result\n      }\n    })\n  }\n  // It could be that attempt to reduce underlaying reducible throws, if that\n  // is the case still forward an `error` to a reducer and store reduced state\n  // into result, in case process of reduction started before exception and\n  // forward will still be called. Return result either way to signal\n  // completion.\n  catch(error) {\n    next(error, state)\n    result = reduced(state)\n    return result\n  }\n})\n\nfunction reducible(reduce) {\n  return new Reducible(reduce)\n}\nreducible.type = Reducible\n\nmodule.exports = reducible\n\n//@ sourceURL=/node_modules/reducible/reducible.js"
));

require.define("/node_modules/reducers/map.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar reducer = require(\"./reducer\")\n\nvar map = reducer(function map(f, next, value, result) {\n  /**\n  Returns transformed version of given `source` where each item of it\n  is mapped using `f`.\n\n  ## Example\n\n  var data = [{ name: \"foo\" }, { name: \"bar\" }]\n  var names = map(data, function(value) { return value.name })\n  print(names) // => < \"foo\" \"bar\" >\n  **/\n  next(f(value), result)\n})\n\nmodule.exports = map\n\n//@ sourceURL=/node_modules/reducers/map.js"
));

require.define("/node_modules/reducers/expand.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar merge = require(\"./merge\")\nvar map = require(\"./map\")\n\nfunction expand(source, f) {\n  /**\n  Takes `source` sequence maps each item via `f` to a new sequence\n  and then flattens them down into single form sequence. Note that\n  returned sequence will have items ordered by time and not by index,\n  if you wish opposite you need to force sequential order by wrapping\n  `source` into `sequential` before passing it.\n\n  ## Example\n\n  var sequence = expand([ 1, 2, 3 ], function(x) {\n    return [ x, x * x ]\n  })\n  print(sequence)   // => < 1 1 2 4 3 9 >\n\n  **/\n  return merge(map(source, f))\n}\n\nmodule.exports = expand\n\n//@ sourceURL=/node_modules/reducers/expand.js"
));

require.define("/node_modules/reducers/merge.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar reduce = require(\"reducible/reduce\")\nvar reducible = require(\"reducible/reducible\")\nvar end = require(\"reducible/end\")\nvar isError = require(\"reducible/is-error\")\n\nfunction merge(source) {\n  /**\n  Merges given collection of collections to a collection with items of\n  all nested collections. Note that items in the resulting collection\n  are ordered by the time rather then index, in other words if item from\n  the second nested collection is deliver earlier then the item\n  from first nested collection it will in appear earlier in the resulting\n  collection.\n\n  print(merge([ [1, 2], [3, 4] ]))  // => < 1 2 3 4 >\n  **/\n  return reducible(function accumulateMerged(next, initial) {\n    var state = initial\n    var open = 1\n\n    function forward(value) {\n      if (value === end) {\n        open = open - 1\n        if (open === 0) return next(end)\n      } else {\n        state = next(value, state)\n      }\n      return state\n    }\n\n\n    reduce(source, function accumulateMergeSource(nested) {\n      // If there is an error or end of `source` collection just pass it\n      // to `forward` it will take care of detecting weather it's error\n      // or `end`. In later case it will also figure out if it's `end` of\n      // result to and act appropriately.\n      if (nested === end) return forward(end)\n      if (isError(nested)) return forward(nested)\n      // If `nested` item is not end nor error just `accumulate` it via\n      // `forward` that keeps track of all collections that are bing forwarded\n      // to it.\n      open = open + 1\n      reduce(nested, forward, null)\n    }, initial)\n  })\n}\n\nmodule.exports = merge\n\n//@ sourceURL=/node_modules/reducers/merge.js"
));

require.define("/node_modules/reducers/concat.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar reduce = require(\"reducible/reduce\")\nvar end = require(\"reducible/end\")\n\nvar slicer = Array.prototype.slice\n\nfunction append(left, right) {\n  /**\n  Returns sequences of items in the `left` sequence followed by the\n  items in the `right` sequence.\n  **/\n  return reducible(function reduceConcatination(next, initial) {\n    reduce(left, function reduceLeft(value, result) {\n      return value === end ? reduce(right, next, result) :\n             next(value, result)\n    }, initial)\n  })\n}\n\nfunction concat(left, right /*, ...rest*/) {\n  /**\n  Returns a sequence representing the concatenation of the elements in the\n  supplied arguments, in the given order.\n\n  print(concat([ 1 ], [ 2, 3 ], [ 4, 5, 6 ])) // => <stream 1 2 3 4 5 6 />\n\n  **/\n  switch (arguments.length) {\n    case 1: return left\n    case 2: return append(left, right)\n    default: return slicer.call(arguments).reduce(append)\n  }\n}\n\nmodule.exports = concat\n\n//@ sourceURL=/node_modules/reducers/concat.js"
));

require.define("/node_modules/reducers/fold.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar reduce = require(\"reducible/reduce\")\nvar isError = require(\"reducible/is-error\")\nvar isReduced = require(\"reducible/is-reduced\")\nvar end = require(\"reducible/end\")\n\nvar Eventual = require(\"eventual/type\")\nvar deliver = require(\"eventual/deliver\")\nvar defer = require(\"eventual/defer\")\nvar when = require(\"eventual/when\")\n\n\n// All eventual values are reduced same as the values they realize to.\nreduce.define(Eventual, function reduceEventual(eventual, next, initial) {\n  return when(eventual, function delivered(value) {\n    return reduce(value, next, initial)\n  }, function failed(error) {\n    next(error, initial)\n    return error\n  })\n})\n\n\nfunction fold(source, next, initial) {\n  /**\n  Fold is just like `reduce` with a difference that `next` reducer / folder\n  function it takes has it's parameters reversed. One always needs `value`,\n  but not always accumulated one. To avoid conflict with array `reduce` we\n  have a `fold`.\n  **/\n  var promise = defer()\n  reduce(source, function fold(value, state) {\n    // If source is `end`-ed deliver accumulated `state`.\n    if (value === end) return deliver(promise, state)\n    // If is source has an error, deliver that.\n    else if (isError(value)) return deliver(promise, value)\n\n    // Accumulate new `state`\n    try { state = next(value, state) }\n    // If exception is thrown at accumulation deliver thrown error.\n    catch (error) { return deliver(promise, error) }\n\n    // If already reduced, then deliver.\n    if (isReduced(state)) deliver(promise, state.value)\n\n    return state\n  }, initial)\n\n  // Wrap in `when` in case `promise` is already delivered to return an\n  // actual value.\n  return when(promise)\n}\n\nmodule.exports = fold\n\n//@ sourceURL=/node_modules/reducers/fold.js"
));

require.define("/node_modules/reducers/node_modules/eventual/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./index.js\"}\n//@ sourceURL=/node_modules/reducers/node_modules/eventual/package.json"
));

require.define("/node_modules/reducers/node_modules/eventual/type.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar watchers = require(\"watchables/watchers\")\nvar watch = require(\"watchables/watch\")\nvar await = require(\"pending/await\")\nvar isPending = require(\"pending/is\")\nvar deliver = require(\"./deliver\")\nvar when = require(\"./when\")\n\n// Internal utility function returns true if given value is of error type,\n// otherwise returns false.\nvar isError = (function() {\n  var stringy = Object.prototype.toString\n  var error = stringy.call(Error.prototype)\n  return function isError(value) {\n    return stringy.call(value) === error\n  }\n})()\n\n// Internal utility, identity function. Returns whatever is given to it.\nfunction identity(value) { return value }\n\n// Internal utility, decorator function that wraps given function into\n// try / catch and returns thrown exception in case when exception is\n// thrown.\nfunction attempt(f) {\n  return function effort(value) {\n    try { return f(value) }\n    catch (error) { return error }\n  }\n}\n\n\n// Define property names used by an `Eventual` type. Names are prefixed via\n// `module.id` to avoid name conflicts.\nvar observers = \"observers@\" + module.id\nvar result = \"value@\" + module.id\nvar pending = \"pending@\" + module.id\n\n\nfunction Eventual() {\n  /**\n  Data type representing eventual value, that can be observed and delivered.\n  Type implements `watchable`, `pending` and `eventual` abstractions, where\n  first two are defined in an external libraries.\n  **/\n  this[observers] = []\n  this[result] = this\n  this[pending] = true\n}\n// Expose property names via type static properties so that it's easier\n// to refer to them while debugging.\nEventual.observers = observers\nEventual.result = result\nEventual.pending = pending\n\nwatchers.define(Eventual, function(value) {\n  return value[observers]\n})\n// Eventual values considered to be pending until the are deliver by calling\n// `deliver`. Internal `pending` property is used to identify weather value\n// is being watched or not.\nisPending.define(Eventual, function(value) {\n  return value[pending]\n})\n// Eventual type implements await function of pending abstraction, to enable\n// observation of value delivery.\nawait.define(Eventual, function(value, observer) {\n  if (isPending(value)) watch(value, observer)\n  else observer(value[result])\n})\n\n// Eventual implements `deliver` function of pending abstraction, to enable\n// fulfillment of eventual values. Eventual value can be delivered only once,\n// which will transition it from pending state to non-pending state. All\n// further deliveries are ignored. It's also guaranteed that all the registered\n// observers will be invoked in FIFO order.\ndeliver.define(Eventual, function(value, data) {\n  // Ignore delivery if value is no longer pending, or if it's in a process of\n  // delivery (in this case eventual[result] is set to value other than\n  // eventual itself). Also ignore if data deliver is value itself.\n  if (value !== data && isPending(value) && value[result] === value) {\n    var count = 0\n    var index = 0\n    var delivering = true\n    var observers = void(0)\n    // Set eventual value result to passed data value that also marks value\n    // as delivery in progress. This way all the `deliver` calls is side\n    // effect to this will be ignored. Note: value should still remain pending\n    // so that new observers could be registered instead of being called\n    // immediately, otherwise it breaks FIFO order.\n    value[result] = data\n    while (delivering) {\n      // If current batch of observers is exhausted, splice a new batch\n      // and continue delivery. New batch is created only if new observers\n      // are registered in side effect to this call of deliver.\n      if (index === count) {\n        observers = watchers(value).splice(0)\n        count = observers.length\n        index = 0\n        // If new observers have not being registered mark value as no longer\n        // pending and finish delivering.\n        if (count === index) {\n          value[pending] = false\n          delivering = false\n        }\n      }\n      // Register await handlers on given result, is it may be eventual /\n      // pending itself. Delivering eventual will cause delivery of the\n      // delivered eventual's delivery value, whenever that would be.\n      else {\n        await(data, observers[index])\n        index = index + 1\n      }\n    }\n  }\n})\n\n// Eventual implements `when` polymorphic function that is part of it's own\n// abstraction. It takes `value` `onFulfill` & `onError` handlers. In return\n// when returns eventual value, that is delivered return value of the handler\n// that is invoked depending on the given values delivery. If deliver value\n// is of error type error handler is invoked. If value is delivered with other\n// non-pending value that is not of error type `onFulfill` handlers is invoked\n// with it. If pending value is delivered then it's value will be delivered\n// it's result whenever that would be. This will cause both value and error\n// propagation.\nwhen.define(Eventual, function(value, onRealize, onError) {\n  // Create eventual value for a return value.\n  var delivered = false\n  var eventual = void(0)\n  var result = void(0)\n  // Wrap handlers into attempt decorator function, so that in case of\n  // exception thrown error is returned causing error propagation. If handler\n  // is missing identity function is used instead to propagate value / error.\n  var realize = onRealize ? attempt(onRealize) : identity\n  var error = onError ? attempt(onError) : identity\n  // Wait for pending value to be delivered.\n  await(value, function onDeliver(data) {\n    // Once value is delivered invoke appropriate handler, and deliver it\n    // to a resulting eventual value.\n    result = isError(data) ? error(data)\n                           : realize(data)\n\n    // If outer function is already returned and has created eventual\n    // for it's result deliver it. Otherwise (if await called observer\n    // in same synchronously) mark result delivered.\n    if (eventual) deliver(eventual, result)\n    else delivered = true\n  })\n\n  // If result is delivered already return it, otherwise create eventual\n  // value for the result and return that.\n  return delivered ? result : (eventual = new Eventual())\n})\n\nmodule.exports = Eventual\n\n//@ sourceURL=/node_modules/reducers/node_modules/eventual/type.js"
));

require.define("/node_modules/reducers/node_modules/watchables/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./index.js\"}\n//@ sourceURL=/node_modules/reducers/node_modules/watchables/package.json"
));

require.define("/node_modules/reducers/node_modules/watchables/watchers.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar method = require(\"method\")\n\n// Method is supposed to return array of watchers for the given\n// value.\nvar watchers = method(\"watchers\")\nmodule.exports = watchers\n\n//@ sourceURL=/node_modules/reducers/node_modules/watchables/watchers.js"
));

require.define("/node_modules/reducers/node_modules/watchables/watch.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar method = require(\"method\")\nvar watchers = require(\"./watchers\")\n\nvar watch = method(\"watch\")\nwatch.define(function(value, watcher) {\n  // Registers a `value` `watcher`, unless it\"s already registered.\n  var registered = watchers(value)\n  if (registered && registered.indexOf(watcher) < 0)\n    registered.push(watcher)\n  return value\n})\n\nmodule.exports = watch\n\n//@ sourceURL=/node_modules/reducers/node_modules/watchables/watch.js"
));

require.define("/node_modules/reducers/node_modules/eventual/node_modules/pending/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./index.js\"}\n//@ sourceURL=/node_modules/reducers/node_modules/eventual/node_modules/pending/package.json"
));

require.define("/node_modules/reducers/node_modules/eventual/node_modules/pending/await.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar method = require(\"method\")\n\n// Set's up a callback to be called once pending\n// value is realized. All object by default are realized.\nvar await = method(\"await\")\nawait.define(function(value, callback) { callback(value) })\n\nmodule.exports = await\n\n//@ sourceURL=/node_modules/reducers/node_modules/eventual/node_modules/pending/await.js"
));

require.define("/node_modules/reducers/node_modules/eventual/node_modules/pending/is.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar method = require(\"method\")\n\n// Returns `true` if given `value` is pending, otherwise returns\n// `false`. All types will return false unless type specific\n// implementation is provided to do it otherwise.\nvar isPending = method(\"is-pending\")\n\nisPending.define(function() { return false })\n\nmodule.exports = isPending\n\n//@ sourceURL=/node_modules/reducers/node_modules/eventual/node_modules/pending/is.js"
));

require.define("/node_modules/reducers/node_modules/eventual/deliver.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\n// Anyone crating an eventual will likely need to realize it, requiring\n// dependency on other package is complicated, not to mention that one\n// can easily wind up with several copies that does not necessary play\n// well with each other. Exposing this solves the issues.\nmodule.exports = require(\"pending/deliver\")\n\n//@ sourceURL=/node_modules/reducers/node_modules/eventual/deliver.js"
));

require.define("/node_modules/reducers/node_modules/eventual/node_modules/pending/deliver.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar method = require(\"method\")\n// Method delivers pending value.\nvar deliver = method(\"deliver\")\n\nmodule.exports = deliver\n\n//@ sourceURL=/node_modules/reducers/node_modules/eventual/node_modules/pending/deliver.js"
));

require.define("/node_modules/reducers/node_modules/eventual/when.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar method = require(\"method\")\nvar when = method(\"when\")\n\nwhen.define(function(value, onRealize) {\n  return typeof(onRealize) === \"function\" ? onRealize(value) : value\n})\nwhen.define(Error, function(error, onRealize, onError) {\n  return typeof(onError) === \"function\" ? onError(error) : error\n})\n\nmodule.exports = when\n\n//@ sourceURL=/node_modules/reducers/node_modules/eventual/when.js"
));

require.define("/node_modules/reducers/node_modules/eventual/defer.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar Eventual = require(\"./type\")\nvar defer = function defer() { return new Eventual() }\n\nmodule.exports = defer\n\n//@ sourceURL=/node_modules/reducers/node_modules/eventual/defer.js"
));

require.define("/node_modules/dom-reduce/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./index.js\"}\n//@ sourceURL=/node_modules/dom-reduce/package.json"
));

require.define("/node_modules/dom-reduce/event.js",Function(['require','module','exports','__dirname','__filename','process','global'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true */\n\n\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar isReduced = require(\"reducible/is-reduced\")\n\nfunction open(target, type, options) {\n  /**\n  Capture events on a DOM element, converting them to a reducible channel.\n  Returns a reducible channel.\n\n  ## Example\n\n      var allClicks = open(document.documentElement, \"click\")\n      var clicksOnMyTarget = filter(allClicks, function (click) {\n        return click.target === myTarget\n      })\n  **/\n  var capture = options && options.capture || false\n  return reducible(function reducDomEvents(next, result) {\n    function handler(event) {\n      result = next(event, result)\n      //  When channel is marked as accumulated, remove event listener.\n      if (isReduced(result)) {\n        if (target.removeEventListener)\n          target.removeEventListener(type, handler, capture)\n        else\n          target.detachEvent(type, handler, capture)\n      }\n    }\n    if (target.addEventListener) target.addEventListener(type, handler, capture)\n    else target.attachEvent(\"on\" + type, handler)\n  })\n}\n\nmodule.exports = open\n\n//@ sourceURL=/node_modules/dom-reduce/event.js"
));

require.define("/node_modules/reducers/debug/print.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar reduce = require(\"reducible/reduce\")\nvar reducible = require(\"reducible/reducible\")\nvar end = require(\"reducible/end\")\nvar isError = require(\"reducible/is-error\")\n\nvar PREFIX = \"\\u200B\"\nvar OPEN = PREFIX + \"< \"\nvar CLOSE = PREFIX + \">\\n\"\nvar ERROR = PREFIX + \"\\u26A1 \"\nvar DELIMITER = PREFIX + \" \"\n\nvar SPECIALS = [ OPEN, CLOSE, ERROR, DELIMITER ]\n\nvar write = (function() {\n  if (typeof(process) !== \"undefined\" &&\n      typeof(process.stdout) !== \"undefined\" &&\n      typeof(process.stdout.write) === \"function\") {\n    var inspect = require(\"util\").inspect\n    var slicer = Array.prototype.slice\n    return function write() {\n      var message = slicer.call(arguments).map(function($) {\n        return SPECIALS.indexOf($) >= 0 ? $ : inspect($)\n      }).join(\"\")\n      process.stdout.write(message)\n    }\n  } else {\n    return console.log.bind(console)\n  }\n})()\n\nfunction print(source) {\n  var open = false\n  reduce(source, function reducePrintSource(value) {\n    if (!open) write(OPEN)\n    open = true\n\n    if (value === end) write(CLOSE)\n    else if (isError(value)) write(ERROR, value, DELIMITER, CLOSE)\n    else write(value, DELIMITER)\n  })\n}\n\nmodule.exports = print\n\n//@ sourceURL=/node_modules/reducers/debug/print.js"
));

require.define("util",Function(['require','module','exports','__dirname','__filename','process','global'],"var events = require('events');\n\nexports.isArray = isArray;\nexports.isDate = function(obj){return Object.prototype.toString.call(obj) === '[object Date]'};\nexports.isRegExp = function(obj){return Object.prototype.toString.call(obj) === '[object RegExp]'};\n\n\nexports.print = function () {};\nexports.puts = function () {};\nexports.debug = function() {};\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (typeof f !== 'string') {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j': return JSON.stringify(args[i++]);\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (x === null || typeof x !== 'object') {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: colors ? stylizeWithColor : stylizeNoColor\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\nvar colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\nvar styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + colors[style][0] + 'm' + str +\n           '\\u001b[' + colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    return String(value.inspect(recurseTimes));\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object_keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object_getOwnPropertyNames(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (typeof value === 'function') {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!visibleKeys.hasOwnProperty(key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\nfunction isArray(ar) {\n  return ar instanceof Array ||\n         Array.isArray(ar) ||\n         (ar && ar !== Object.prototype && isArray(ar.__proto__));\n}\n\n\nfunction isRegExp(re) {\n  return re instanceof RegExp ||\n    (typeof re === 'object' && Object.prototype.toString.call(re) === '[object RegExp]');\n}\n\n\nfunction isDate(d) {\n  if (d instanceof Date) return true;\n  if (typeof d !== 'object') return false;\n  var properties = Date.prototype && Object_getOwnPropertyNames(Date.prototype);\n  var proto = d.__proto__ && Object_getOwnPropertyNames(d.__proto__);\n  return JSON.stringify(proto) === JSON.stringify(properties);\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\nexports.isError = isError;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\nexports.log = function (msg) {};\n\nexports.pump = null;\n\nvar Object_keys = Object.keys || function (obj) {\n    var res = [];\n    for (var key in obj) res.push(key);\n    return res;\n};\n\nvar Object_getOwnPropertyNames = Object.getOwnPropertyNames || function (obj) {\n    var res = [];\n    for (var key in obj) {\n        if (Object.hasOwnProperty.call(obj, key)) res.push(key);\n    }\n    return res;\n};\n\nvar Object_create = Object.create || function (prototype, properties) {\n    // from es5-shim\n    var object;\n    if (prototype === null) {\n        object = { '__proto__' : null };\n    }\n    else {\n        if (typeof prototype !== 'object') {\n            throw new TypeError(\n                'typeof prototype[' + (typeof prototype) + '] != \\'object\\''\n            );\n        }\n        var Type = function () {};\n        Type.prototype = prototype;\n        object = new Type();\n        object.__proto__ = prototype;\n    }\n    if (typeof properties !== 'undefined' && Object.defineProperties) {\n        Object.defineProperties(object, properties);\n    }\n    return object;\n};\n\nexports.inherits = function(ctor, superCtor) {\n  ctor.super_ = superCtor;\n  ctor.prototype = Object_create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n};\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (typeof f !== 'string') {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(exports.inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j': return JSON.stringify(args[i++]);\n      default:\n        return x;\n    }\n  });\n  for(var x = args[i]; i < len; x = args[++i]){\n    if (x === null || typeof x !== 'object') {\n      str += ' ' + x;\n    } else {\n      str += ' ' + exports.inspect(x);\n    }\n  }\n  return str;\n};\n\n//@ sourceURL=util"
));

require.define("events",Function(['require','module','exports','__dirname','__filename','process','global'],"if (!process.EventEmitter) process.EventEmitter = function () {};\n\nvar EventEmitter = exports.EventEmitter = process.EventEmitter;\nvar isArray = typeof Array.isArray === 'function'\n    ? Array.isArray\n    : function (xs) {\n        return Object.prototype.toString.call(xs) === '[object Array]'\n    }\n;\nfunction indexOf (xs, x) {\n    if (xs.indexOf) return xs.indexOf(x);\n    for (var i = 0; i < xs.length; i++) {\n        if (x === xs[i]) return i;\n    }\n    return -1;\n}\n\n// By default EventEmitters will print a warning if more than\n// 10 listeners are added to it. This is a useful default which\n// helps finding memory leaks.\n//\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nvar defaultMaxListeners = 10;\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!this._events) this._events = {};\n  this._events.maxListeners = n;\n};\n\n\nEventEmitter.prototype.emit = function(type) {\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events || !this._events.error ||\n        (isArray(this._events.error) && !this._events.error.length))\n    {\n      if (arguments[1] instanceof Error) {\n        throw arguments[1]; // Unhandled 'error' event\n      } else {\n        throw new Error(\"Uncaught, unspecified 'error' event.\");\n      }\n      return false;\n    }\n  }\n\n  if (!this._events) return false;\n  var handler = this._events[type];\n  if (!handler) return false;\n\n  if (typeof handler == 'function') {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        var args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n    return true;\n\n  } else if (isArray(handler)) {\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    var listeners = handler.slice();\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i].apply(this, args);\n    }\n    return true;\n\n  } else {\n    return false;\n  }\n};\n\n// EventEmitter is defined in src/node_events.cc\n// EventEmitter.prototype.emit() is also defined there.\nEventEmitter.prototype.addListener = function(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new Error('addListener only takes instances of Function');\n  }\n\n  if (!this._events) this._events = {};\n\n  // To avoid recursion in the case that type == \"newListeners\"! Before\n  // adding it to the listeners, first emit \"newListeners\".\n  this.emit('newListener', type, listener);\n\n  if (!this._events[type]) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  } else if (isArray(this._events[type])) {\n\n    // Check for listener leak\n    if (!this._events[type].warned) {\n      var m;\n      if (this._events.maxListeners !== undefined) {\n        m = this._events.maxListeners;\n      } else {\n        m = defaultMaxListeners;\n      }\n\n      if (m && m > 0 && this._events[type].length > m) {\n        this._events[type].warned = true;\n        console.error('(node) warning: possible EventEmitter memory ' +\n                      'leak detected. %d listeners added. ' +\n                      'Use emitter.setMaxListeners() to increase limit.',\n                      this._events[type].length);\n        console.trace();\n      }\n    }\n\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  } else {\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  var self = this;\n  self.on(type, function g() {\n    self.removeListener(type, g);\n    listener.apply(this, arguments);\n  });\n\n  return this;\n};\n\nEventEmitter.prototype.removeListener = function(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new Error('removeListener only takes instances of Function');\n  }\n\n  // does not use listeners(), so no side effect of creating _events[type]\n  if (!this._events || !this._events[type]) return this;\n\n  var list = this._events[type];\n\n  if (isArray(list)) {\n    var i = indexOf(list, listener);\n    if (i < 0) return this;\n    list.splice(i, 1);\n    if (list.length == 0)\n      delete this._events[type];\n  } else if (this._events[type] === listener) {\n    delete this._events[type];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  // does not use listeners(), so no side effect of creating _events[type]\n  if (type && this._events && this._events[type]) this._events[type] = null;\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  if (!this._events) this._events = {};\n  if (!this._events[type]) this._events[type] = [];\n  if (!isArray(this._events[type])) {\n    this._events[type] = [this._events[type]];\n  }\n  return this._events[type];\n};\n\n//@ sourceURL=events"
));

require.define("/node_modules/zip-reduce/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./zip.js\"}\n//@ sourceURL=/node_modules/zip-reduce/package.json"
));

require.define("/node_modules/zip-reduce/zip.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar accumulate = require(\"reducible/reduce\")\nvar reduced = require(\"reducible/reduced\")\nvar isReduced = require(\"reducible/is-reduced\")\nvar isError = require(\"reducible/is-error\")\nvar end = require(\"reducible/end\")\n\nvar map = require(\"reducers/map\")\n\nvar slicer = Array.prototype.slice\n\nfunction makeAccumulator(side) {\n  var other = side === \"left\" ? \"right\" : \"left\"\n  return function accumulate(value, state) {\n    var queue = state[side]\n    var buffer = state[other]\n    var dispatch = state.next\n    // If consumer finished consumption, then notify stream.\n    if (state.closed)  return state.result\n    // If this is an end of this stream, close a queue to indicate\n    // no other value will be queued.\n    else if (value === end) {\n      if (isReduced(state)) return state\n      queue.closed = true\n      // If queue is empty, dispatch end of stream.\n      if (!queue.length) {\n        dispatch(value, state.result)\n        state.left = state.right = state.next = null\n        state.closed = true\n        state.result = reduced(result)\n      }\n    }\n    else {\n      queue.push(value)\n      // If there is a buffered value on both streams shift and dispatch.\n      if (buffer.length) {\n        if (isError(buffer[0]))\n          dispatch(buffer.shift(), state.result)\n        else if (isError(queue[0]))\n          dispatch(queue.shift(), state.result)\n\n        if (buffer.length && queue.length) {\n          var result = dispatch([\n            state.left.shift(),\n            state.right.shift()\n          ], state.result)\n          // If consumer is done consumption or if buffer is empty and closed\n          // dispatch end, and mark stream ended to stop streams and queueing\n          // values too.\n          if (isReduced(result) || (buffer.closed && !buffer.length)) {\n            // Dispatch end of stream and cleanup state attributes.\n            dispatch(end, result)\n            state.left = state.right = state.next = null\n            state.closed = true\n            state.result = reduced(result)\n          } else {\n            state.result = result\n          }\n        }\n      }\n    }\n    return state\n  }\n}\n\nvar accumulateLeft = makeAccumulator(\"left\")\nvar accumulateRight = makeAccumulator(\"right\")\n\nfunction Zip() {}\naccumulate.define(Zip, function(zipped, next, start) {\n  var state = { result: start, next: next, left: [], right: [] }\n  accumulate(zipped.left, accumulateLeft, state)\n  accumulate(zipped.right, accumulateRight, state)\n})\n\nfunction array(item) { return [item] }\n\nfunction unite(value) {\n  value[0].push(value[1])\n  return value[0]\n}\n\nfunction concatzip(zipped, sequence) {\n  return map(zip(zipped, sequence), unite)\n}\n\nfunction zip(left, right/*, ...rest*/) {\n  switch (arguments.length) {\n    case 1:\n      return map(left, array)\n    case 2:\n      var value = new Zip()\n      value.left = left\n      value.right = right\n      value.leftQueue = []\n      value.rightQueue = []\n      return value\n    default:\n      return slicer.call(arguments, 2).reduce(concatzip, zip(left, right))\n  }\n}\n\nmodule.exports = zip\n\n//@ sourceURL=/node_modules/zip-reduce/zip.js"
));

require.define("/node_modules/grep-reduce/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./grep.js\"}\n//@ sourceURL=/node_modules/grep-reduce/package.json"
));

require.define("/node_modules/grep-reduce/grep.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar filter = require(\"reducers/filter\")\nvar map = require(\"reducers/map\")\nvar Pattern = require(\"pattern-exp\")\nvar score = require(\"match-score\")\n\nfunction isPositiveScore(data) { return data[1] > 0 }\n\nfunction grep(pattern, data, serialize) {\n  /**\n  Function returns values from `data` paired with the match score for\n  `pattern`. If there is no match value will be excluded from the result.\n\n  ## Examples\n\n  **/\n \n  if (typeof(serialize) !== \"function\") serialize = String\n  // Creating pattern from the given input.\n  pattern = Pattern(pattern || \"\", \"i\")\n  // Map to data value and pattern match score pairs.\n  var scoredData = map(data, function(value) {\n    return [ value, score(pattern, serialize(value)) ]\n  })\n  // Filter only matches who's score is positive.\n  return filter(scoredData, isPositiveScore)\n}\n\nmodule.exports = grep\n\n//@ sourceURL=/node_modules/grep-reduce/grep.js"
));

require.define("/node_modules/grep-reduce/node_modules/pattern-exp/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./pattern-exp.js\"}\n//@ sourceURL=/node_modules/grep-reduce/node_modules/pattern-exp/package.json"
));

require.define("/node_modules/grep-reduce/node_modules/pattern-exp/pattern-exp.js",Function(['require','module','exports','__dirname','__filename','process','global'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true*/\n\n\"use strict\";\n\nvar stirgifier = Object.prototype.toString\nvar ESCAPE_PATTERN = /[\\.\\?\\*\\+\\^\\$\\|\\(\\)\\{\\[\\]\\\\]/g\n\nfunction escape(pattern) {\n  /**\n  Returns the `pattern` with all regexp meta characters in it backslashed.\n  **/\n  return String(pattern).replace(ESCAPE_PATTERN, '\\\\$&')\n}\nescape.pattern = ESCAPE_PATTERN\n\nfunction Pattern(pattern, flags) {\n  /**\n  Function takes `pattern` string or regexp & optional flags string,\n  which is just regexp flags and returns instance of `RegExp` by actually\n  calling it. If pattern fails to compile it will escaped given pattern and\n  compile it to regexp after.\n\n  ## examples\n \n  RegExp(\"[\")          // => SyntaxError(\"unterminated character class\")\n  RegExp(/:/, \"y\")     // => TypeError(\"can't supply flags when ...\")\n  Pattern(\"[\")          // => /\\[/\n  Pattern(/:/, \"y\")     // => /:/\n  **/\n  if (!pattern.exec) {\n    try {\n      pattern = RegExp(pattern, flags)\n    } catch (exception) {\n      if (exception instanceof SyntaxError)\n        pattern = RegExp(escape(pattern), flags)\n      else\n        throw exception\n    }\n  }\n  return pattern\n}\nPattern.escape = escape\n\nmodule.exports = Pattern\n\n//@ sourceURL=/node_modules/grep-reduce/node_modules/pattern-exp/pattern-exp.js"
));

require.define("/node_modules/grep-reduce/node_modules/match-score/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./match-score.js\"}\n//@ sourceURL=/node_modules/grep-reduce/node_modules/match-score/package.json"
));

require.define("/node_modules/grep-reduce/node_modules/match-score/match-score.js",Function(['require','module','exports','__dirname','__filename','process','global'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true*/\n\n\"use strict\";\n\nfunction Calculator(SCORE_BASE, SCORE_LENGTH) {\n  var SCORE_INDEX = 1 - SCORE_BASE - SCORE_LENGTH\n  return function score(pattern, input) {\n    /**\n    Calculates the score for use in suggestions from\n    a result array `match` of `RegExp#exec`.\n    **/\n    input = String(input)\n    var match, length = input.length, value = null\n    if ((match = pattern.exec(input))) {\n      value = SCORE_BASE +\n              SCORE_LENGTH * Math.sqrt(match[0].length / length) +\n              SCORE_INDEX  * (1 - match.index / length)\n    }\n    return value\n  }\n}\n\nvar score = Calculator(0.3, 0.25)\nscore.make = Calculator\n\nmodule.exports = score\n\n//@ sourceURL=/node_modules/grep-reduce/node_modules/match-score/match-score.js"
));

require.define("/node_modules/functional/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./index.js\"}\n//@ sourceURL=/node_modules/functional/package.json"
));

require.define("/node_modules/functional/compose.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar slicer = Array.prototype.slice\n\nmodule.exports = compose\nfunction compose() {\n  /**\n  Returns the composition of a list of functions, where each function\n  consumes the return value of the function that follows. In math\n  terms, composing the functions `f()`, `g()`, and `h()` produces\n  `f(g(h()))`.\n  Usage:\n  var greet = function(name) { return 'hi: ' + name }\n  var exclaim = function(statement) { return statement + '!' }\n  var welcome = compose(exclaim, greet)\n  welcome('moe')\n  // => 'hi: moe!'\n  **/\n\n  var lambdas = slicer.call(arguments)\n  return function composed() {\n    var params = slicer.call(arguments)\n    var index = lambdas.length\n    var result = [lambdas[--index].apply(this, params)]\n    while (0 <= --index) result[0] = lambdas[index].apply(this, result)\n    return result[0]\n  }\n}\n\n//@ sourceURL=/node_modules/functional/compose.js"
));

require.define("/node_modules/functional/partial.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar slicer = Array.prototype.slice\n\nmodule.exports = partial\nfunction partial(lambda) {\n  /**\n  Function composes new function out of given `lambda` with rest of the\n  arguments curried.\n\n  ## Example\n\n      function sum(x, y) { return x + y }\n      var inc = partial(sum, 1)\n\n      inc(5) // => 6\n  **/\n  var curried = slicer.call(arguments, 1)\n  return function partial() {\n    var params = slicer.call(arguments)\n    params.unshift.apply(params, curried)\n    return lambda.apply(this, params)\n  }\n}\n\n//@ sourceURL=/node_modules/functional/partial.js"
));

require.define("/node_modules/oops/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./oops.js\"}\n//@ sourceURL=/node_modules/oops/package.json"
));

require.define("/node_modules/oops/field.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar curry = require(\"functional/curry\")\n\nvar field = curry(function(id, hash) {\n  /**\n  High order function that returns accessor function for the attribute\n  with a given name. Resulting function will take an object and will return\n  value associated with that field.\n  **/\n  return hash[id]\n})\n\nmodule.exports = field\n\n//@ sourceURL=/node_modules/oops/field.js"
));

require.define("/node_modules/functional/curry.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar slicer = Array.prototype.slice\n\nmodule.exports = curry\n\nfunction currier(lambda, arity, params) {\n  return function curried() {\n    /**\n    Function either continues curring of the arguments or executes function\n    if desired arguments have being collected. If function curried is variadic\n    then execution without arguments will finish curring and trigger function.\n    **/\n\n    var input = slicer.call(arguments)\n    // Function will be executed if curried function is variadic and this is\n    // invoked without any arguments.\n    var execute = Infinity === arity && input.length === 0 \n    // Prepend all curried arguments to the given arguments.\n    if (params) input.unshift.apply(input, params)\n    // If all expected number of arguments has being collected, or if function\n    // is variadic and no arguments have being passed invoke a curried function.\n    return (input.length >= arity || execute) ? lambda.apply(this, input) :\n           // Otherwise continue curried.\n           currier(lambda, arity, input)\n  }\n}\n\nfunction curry(lambda, arity) {\n  /**\n  Returns function with implicit currying, which will continue currying until\n  expected number of argument is collected. Expected number of arguments is\n  determined by `lambda.length` unless it's 0. In later case function will be\n  assumed to be variadic and will be curried until invoked with `0` arguments.\n  Optionally `arity` of curried arguments can be overridden via second `arity`\n  argument.\n\n  ## Examples\n\n     var sum = curry(function(a, b) {\n       return a + b\n     })\n     console.log(sum(2, 2)) // 4\n     console.log(sum(2)(4)) // 6\n\n     var sum = curry(function() {\n       return Array.prototype.reduce.call(arguments, function(sum, number) {\n         return sum + number\n       }, 0)\n     })\n     console.log(sum(2, 2)()) // 4\n     console.log(sum(2, 4, 5)(-3)(1)()) // 9\n  **/\n\n  return currier(lambda, arity || lambda.length)\n}\n\n//@ sourceURL=/node_modules/functional/curry.js"
));

require.define("/node_modules/oops/query.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar curry = require(\"functional/curry\")\n\nvar query = curry(function query(path, target) {\n  var names = path.split(\".\")\n  var count = names.length\n  var index = 0\n  var result = target\n  while (result && index < count) {\n    result = result[names[index]]\n    index = index + 1\n  }\n  return result\n})\n\nmodule.exports = query\n\n//@ sourceURL=/node_modules/oops/query.js"
));

require.define("/node_modules/transducer/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {\"main\":\"./index.js\"}\n//@ sourceURL=/node_modules/transducer/package.json"
));

require.define("/node_modules/transducer/drop-repeats.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar reductions = require(\"reducers/reductions\")\nvar filter = require(\"reducers/filter\")\nvar map = require(\"reducers/map\")\n\n\nvar ITEM = 0\nvar EQUAL = 1\n\nfunction dropRepeats(input, assert) {\n  /**\n  Takes reducible `input` and returns narrowed down version with sequential\n  repeated values dropped. For example, if a given `input` contains items has\n  following form `< 1 1 2 2 1 >` then result will have a form of `< 1 2 1 >` by\n  dropping the values that are the same as the previous value. Function takes\n  second optional argument `assert` that can be used to compare items. Items\n  to which `assert` returns true will be dropped.\n\n  ## Examples\n\n      dropRepeats([1, 2, 2, 3, 4, 4, 4, 4, 5])\n      // => < 1 2 3 4 5 >\n\n      dropRepeats([1, \"1\", 2, \"2\", 2, 2, 3, 4, \"4\"])\n      // => < 1 \"1\" 2 \"2\" 2 3 4 \"4\" >\n\n      dropRepeats([1, \"1\", 2, \"2\", 2, 3, 4, \"4\"], function(a, b) {\n        return a == b\n      })\n      // => < 1 2 3 4 >\n  **/\n  var states = reductions(input, function(state, item) {\n    var equal = assert ? assert(state[ITEM], item) :\n                item === state[ITEM]\n    return [item, equal]\n  }, [{}])\n  var updates = filter(states, function(state) { return !state[EQUAL] })\n  return map(updates, function(update) { return update[ITEM] })\n}\n\nmodule.exports = dropRepeats\n\n//@ sourceURL=/node_modules/transducer/drop-repeats.js"
));

require.define("/node_modules/reducers/reductions.js",Function(['require','module','exports','__dirname','__filename','process','global'],"\"use strict\";\n\nvar reduce = require(\"reducible/reduce\")\nvar reducible = require(\"reducible/reducible\")\nvar end = require(\"reducible/end\")\nvar isError = require(\"reducible/is-error\")\n\nfunction reductions(source, f, initial) {\n  /**\n  Returns `reducible` collection of the intermediate values of the reduction\n  (as per reduce) of `source` by `f`, starting with `initial` value.\n\n  ## Example\n\n  var numbers = reductions([1, 1, 1, 1], function(accumulated, value) {\n    return accumulated + value\n  }, 0)\n  print(numbers) // => < 1 2 3 4 >\n  **/\n  return reducible(function reduceReductions(next, start) {\n    var state = initial\n    return reduce(source, function reduceReductionsSource(value, result) {\n      if (value === end) return next(end, result)\n      if (isError(value)) return next(value, result)\n      state = f(state, value)\n      return next(state, result)\n    }, start)\n  })\n}\n\nmodule.exports = reductions\n\n//@ sourceURL=/node_modules/reducers/reductions.js"
));

require.define("/package.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = {}\n//@ sourceURL=/package.json"
));

require.define("/kicks.js",Function(['require','module','exports','__dirname','__filename','process','global'],"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// Convert a method func that uses a `this` context into a function that takes\n// the context object as the first parameter.\nfunction lambda(method) {\n  return function (context) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return method.apply(context, args);\n  };\n}\nexports.lambda = lambda;\n\n// A lambda approach to `Array.prototype.slice`.\n// Used in a lot of places for slicing the arguments object into a proper array.\nvar slice = lambda(Array.prototype.slice);\nexports.slice = slice;\n\nvar reverse = lambda(Array.prototype.reverse);\nexports.reverse = reverse;\n\nvar reduce = lambda(Array.prototype.reduce);\nexports.reduce = reduce;\n\n// \"Fill\" arguments out on a function. A bit like `bind` except it always binds\n// the `this` context of the function to `null`, forcing it to be a lambda.\nfunction fill(fn, args, context) {\n  return Function.prototype.bind.apply(fn, [context].concat(slice(arguments)));\n}\nexports.fill = fill;\n\n// Apply an array of arguments to a function.\n// `this` context is optional, and you can skip it if you like.\nfunction apply(fn, args, context) {\n  return fn.apply(context, args);\n}\nexports.apply = apply;\n\n// Compose multiple functions, returning a new function\nfunction compose() {\n  var lambdas = reverse(slice(arguments));\n  return function() {\n    return reduce(lambdas, function (lambda, args) {\n      return [apply(lambda, args)];\n    }, arguments);\n  };\n}\nexports.compose = compose;\n\n// Doesn't work properly. Write test plz.\nfunction extend(obj) {\n  return reduce(slice(arguments, 1), function (obj, objN) {\n    return reduce(Object.keys(objN), function (obj, key) {\n      obj[key] = objN[key];\n      return obj;\n    }, obj);\n  }, obj);\n}\nexports.extend = extend;\n\n//@ sourceURL=/kicks.js"
));

require.define("/assets/apps.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = [\n  {\n    \"id\": \"dialer.gaiamobile.org\",\n    \"actions\": [\n      {\n        \"names\": [\"dial\", \"call\"],\n        \"params\": [\"contact\"],\n        \"caption\": \"Call %\"\n      }\n    ]\n  },\n  {\n    \"id\": \"messages.gaiamobile.org\",\n    \"actions\": [\n      {\n        \"names\": [\"sms\", \"mms\", \"msg\", \"txt\", \"text\", \"message\"],\n        \"params\": [\"contact\", \"message\"],\n        \"caption\": \"SMS %\"\n      }\n    ]\n  },\n  {\n    \"id\": \"music.gaiamobile.org\",\n    \"actions\": [\n      {\n        \"names\": [\"play\", \"listen\", \"music\"],\n        \"params\": [\"artist\"],\n        \"caption\": \"Play %\"\n      }\n    ]\n  },\n  {\n    \"id\": \"contacts.gaiamobile.org\",\n    \"actions\": [\n      {\n        \"names\": [\"\"],\n        \"params\": [\"contact\"],\n        \"caption\": \"%\"\n      }\n    ]\n  }\n]\n;\n\n//@ sourceURL=/assets/apps.json"
));

require.define("/assets/contacts.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = [\n  \"Matt Helm\",\n  \"Hal Ambler\",\n  \"Ali Imran\",\n  \"Jane Blonde\",\n  \"Basil Argyros\",\n  \"Modesty Blaise\",\n  \"Sir Alan Blunt\",\n  \"James Bond\",\n  \"Felix Leiter\",\n  \"Nancy Drew\",\n  \"Sherlock Holmes\",\n  \"Jason Bourne\",\n  \"Tim Donohue\",\n  \"Sam Fisher\",\n  \"Stephen Metcalfe\",\n  \"Jack Ryan\",\n  \"Nick Fury\",\n  \"Ada Wong\",\n  \"Jack Bauer\",\n  \"Sydney Bristow\",\n  \"Ethan Hunt\",\n  \"Wyman Ford\",\n  \"Nick Carter-Killmaster\",\n  \"Johnny Fedora\",\n  \"Tamara Knight\",\n  \"Mitch Rapp\",\n  \"Michael Jagger\",\n  \"George Smiley\",\n  \"Simon Templar\",\n  \"Philip Quest\",\n  \"Mortadelo Pi\",\n  \"Filemón Pi\",\n  \"Maria Hill\"\n]\n;\n\n//@ sourceURL=/assets/contacts.json"
));

require.define("/assets/music.json",Function(['require','module','exports','__dirname','__filename','process','global'],"module.exports = [\n  \"The Album Leaf\",\n  \"Ali Farka Toure\",\n  \"Amiina\",\n  \"Anni Rossi\",\n  \"Arcade Fire\",\n  \"Arthur & Yu\",\n  \"Au\",\n  \"Band of Horses\",\n  \"Beirut\",\n  \"Billie Holiday\",\n  \"Burial\",\n  \"Wilco\",\n  \"Justice\",\n  \"Bishop Allen\",\n  \"Sigur Ros\",\n  \"Bjork\",\n  \"The Black Keys\",\n  \"Bob Dylan\",\n  \"Bodies of Water\",\n  \"Bon Iver\",\n  \"Counting Crows\",\n  \"Death Cab for Cutie\",\n  \"Fleet Foxes\",\n  \"Fleetwood Mac\",\n  \"The Innocence Mission\"\n]\n;\n\n//@ sourceURL=/assets/music.json"
));

require.define("/node_modules/browserify-server/other.js",Function(['require','module','exports','__dirname','__filename','process','global'],"process.env.NODE_ENV = 'undefined'\n\n//@ sourceURL=/node_modules/browserify-server/other.js"
));
require("/node_modules/browserify-server/other.js");

require.define("/index.js",Function(['require','module','exports','__dirname','__filename','process','global'],"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n\"use strict\";\n\n// Imports\n// ----------------------------------------------------------------------------\n\nvar filter = require('reducers/filter');\nvar map = require('reducers/map');\nvar expand = require('reducers/expand');\nvar concat = require('reducers/concat');\nvar merge = require('reducers/merge');\nvar fold = require('reducers/fold');\nvar open = require('dom-reduce/event');\nvar print = require('reducers/debug/print');\nvar zip = require('zip-reduce');\nvar grep = require('grep-reduce');\nvar compose = require('functional/compose');\nvar partial = require('functional/partial');\nvar field = require('oops/field');\nvar query = require('oops/query');\nvar dropRepeats = require('transducer/drop-repeats');\n\nvar kicks = require('./kicks.js'),\n    apply = kicks.apply,\n    slice = kicks.slice,\n    reverse = kicks.reverse,\n    lambda = kicks.lambda,\n    extend = kicks.extend;\n\n\nvar apps = require('./assets/apps.json');\nvar contacts = require('./assets/contacts.json');\nvar music = require('./assets/music.json');\n\nvar SOQ = new String('Start of query');\n\n// Create live stream of all possible actions paired with verbs\n// these actions recognize.\nvar actionsByVerb = expand(apps, function(app) {\n  return expand(app.actions, function(action) {\n    return map(action.names, function(name) {\n      return { name: name, action: action, app: app }\n    })\n  })\n})\n\n// Create live stream of all possible actions paired with types\n// of nouns they can do actions on.\nvar actionsByType = expand(apps, function(app) {\n  return expand(app.actions, function(action) {\n    return map(action.params, function(type) {\n      return { type: type, action: action, app: app }\n    })\n  })\n})\n\n// All the data available, probably interface will need to be different\n// likely application should define hooks for nouns they can produce, such\n// that services could be easily incorporated. For now only thing we really\n// care about is `serialized` property that search will be performed over.\nvar data = {\n  artist: map(music, function(name) {\n    return {\n      artist: name,\n      serialized: name\n    }\n  }),\n  contact: map(contacts, function(name) {\n    return {\n      serialized: name,\n      name: name,\n      org: '',\n      tel: '',\n      url: '',\n      adr: {\n        street_address: '',\n        locality: '',\n        region: '',\n        postal_code: '',\n        country_name: ''\n      },\n      note: ''\n    }\n  })\n}\n\n// Live stream of all the noun data paired with types.\nvar nouns = expand(Object.keys(data), function(type) {\n  return map(data[type], function(noun) {\n    return { type: type, noun: noun }\n  })\n})\n\n// Supporting functions\n// ----------------------------------------------------------------------------\n\n// Takes action object and input for that action and returns string\n// representing caption for the element rendered.\nfunction compileCaption(action, input) {\n  return action.caption.replace('%', input.serialized);\n}\n\nfunction escStringForClassname(string) {\n  return string.replace(/\\~|\\!|\\@|\\$|\\%|\\^|\\&|\\*|\\(|\\)|\\_|\\+|\\-|\\=|\\,|\\.|\\/|\\'|\\;|\\:|\\\"|\\?|\\>|\\<|\\[|\\]|\\\\|\\{|\\}|\\||\\`|\\#/g, '-');\n}\n\n// Control flow logic\n// ----------------------------------------------------------------------------\n\nvar doc = document.documentElement;\n\n// Catch all bubbled keypress events.\nvar keypressesOverTime = open(doc, 'keyup');\n\n// We're only interested in events on the action bar.\nvar actionBarPressesOverTime = filter(keypressesOverTime, function (event) {\n  return event.target.id === 'action-bar';\n});\n\n// Create signal representing query entered into action bar.\nvar searchQuery = map(actionBarPressesOverTime, function (event) {\n  return event.target.value.trim();\n});\n\n// Create signal representing query terms entered into action bar,\n// also repeats in `searchQuery` are dropped to avoid more work\n// down the flow.\nvar searchTerms = map(dropRepeats(searchQuery), function(query) {\n  return query.split(/\\s+/);\n});\n\n\nfunction searchWithVerb(verb, terms) {\n  // We must be more intelligent than this but so far we assume\n  // that the verb is either first term or last.\n  var verbPattern = \"^\" + verb + \"|^$\"\n  // The rest terms are joined such that they can represent beginnings\n  // of the words.\n  var nounPattern = terms.join(\"[^\\\\s]* \")\n  var verbs = grep(verbPattern, actionsByVerb, field(\"name\"))\n\n  return expand(verbs, function(pair) {\n    // So far we don't support multiple action params so we just\n    // pick the first one\n    var app = pair[0].app\n    var action = pair[0].action\n    var score = pair[1]\n\n    var type = action.params[0]\n    var nouns = grep(nounPattern, data[type], field(\"serialized\"))\n    return map(nouns, function(pair) {\n      return {\n        app: app,\n        action: action,\n        // Should we should visually outline actual parts that match?\n        input: pair[0],\n        score: score + pair[1]\n      }\n    })\n  })\n}\n\nfunction searchWithNoun(terms) {\n  // In this case we don't assume than any of the terms is a\n  // verb so we create pattern for nouns from all the terms.\n  var nounPattern = terms.join(\"[^\\\\s]* \")\n  var matches = grep(nounPattern, nouns, query(\"noun.serialized\"))\n  return expand(matches, function(pair) {\n    var score = pair[1]\n    var type = pair[0].type\n    var noun = pair[0].noun\n    // Filter verbs that can work with given noun type.\n    var verbs = filter(actionsByType, function(verb) {\n      return verb.type === type\n    })\n\n    return map(verbs, function(verb) {\n      return {\n        app: verb.app,\n        action: verb.action,\n        input: noun,\n        score: score\n      }\n    })\n  })\n}\n\n// Continues signal representing search results for the entered query.\n// special `SOQ` value is used at as delimiter to indicate results for\n// new query. This can be used by writer to flush previous inputs and\n// start writing now ones.\nvar results = expand(searchTerms, function(terms) {\n  if (!terms.length || !terms[0]) return SOQ\n\n  var count = terms.length\n  var first = terms[0]\n  var last = terms[count - 1]\n\n  return concat(SOQ, merge([\n    searchWithVerb(first, terms.slice(1)),\n    searchWithVerb(last, terms.slice(0, count - 1))\n  ]), searchWithNoun(terms))\n})\n\nfunction renderActions(input, target) {\n  var template = target.ownerDocument.createElement(\"li\")\n  fold(input, function(match, result) {\n    // reset view (probably instead of removing it would be better to move\n    // it down and dim a little to make it clear it's history and not a match.\n    if (match === SOQ) {\n      target.innerHTML = \"\"\n      return []\n    }\n\n    var view = template.cloneNode(true)\n    view.className = 'action-match ' + escStringForClassname(match.app.id)\n    view.textContent = compileCaption(match.action, match.input)\n\n    // TODO: We should do binary search instead, but we\n    // can optimize this later.\n    result.push(match.score)\n    result = result.sort().reverse()\n    var index = result.lastIndexOf(match.score)\n    var prevous = target.children[index]\n\n    target.insertBefore(view, prevous)\n\n    return result\n  }, [])\n}\n\nrenderActions(results,  document.getElementById('matches'))\n\n//@ sourceURL=/index.js"
));
require("/index.js");
})();
